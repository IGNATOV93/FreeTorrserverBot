// <auto-generated />
using AdTorrBot.BotTelegram.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdTorrBot.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241106215701_07112024")]
    partial class _07112024
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("AdTorrBot.BotTelegram.Db.Model.SettingsBot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdChat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("TimeZoneOffset")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("SettingsBot");
                });

            modelBuilder.Entity("AdTorrBot.BotTelegram.Db.Model.SettingsTorrserverBot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActiveAutoChange")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeAutoChangePassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("idChat")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SettingsTorrserverBot");
                });

            modelBuilder.Entity("AdTorrBot.BotTelegram.Db.Model.TextInputFlag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FlagLogin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FlagPassword")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdChat")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TextInputFlag");
                });

            modelBuilder.Entity("AdTorrBot.BotTelegram.Db.Model.TorrserverModel.BitTorrConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CacheSize")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConnectionsLimit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisableDHT")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisablePEX")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisableTCP")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisableUPNP")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisableUTP")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisableUpload")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DownloadRateLimit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnableDLNA")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnableDebug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnableIPv6")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnableRutorSearch")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ForceEncrypt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IdChat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameProfileBot")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PeersListenPort")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreloadCache")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReaderReadAHead")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RemoveCacheOnDrop")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponsiveMode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RetrackersMode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SslCert")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SslKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SslPort")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TorrentDisconnectTimeout")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TorrentsSavePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UploadRateLimit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UseDisk")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BitTorrConfig");
                });

            modelBuilder.Entity("AdTorrBot.BotTelegram.Db.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdChat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });
#pragma warning restore 612, 618
        }
    }
}
